// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String @default("user")
  createdAt DateTime @default(now())
  failedLoginAttempts Int @default(0)
  lockedUntil DateTime?
  
  securityEvents SecurityEvent[]
  reconciliationLogs ReconciliationLog[]
  pendingPayments PendingPayment[]
}

model Contact {
  id            String   @id
  firstName     String?
  lastName      String?
  email         String? @unique
  phone         String?
  membershipType String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Additional GHL fields
  name          String?
  companyName   String?
  address1      String?
  address2      String?
  city          String?
  state         String?
  postalCode    String?
  country       String?
  website       String?
  source        String?
  tags          String[]
  customFields  Json?    // Store all custom fields as JSON
  ghlUpdatedAt  DateTime?
  lastSyncedAt  DateTime @default(now())
  
  // Extracted custom fields for easier querying
  renewal_date  String?  // Extracted from GHL custom field cWMPNiNAfReHOumOhBB2
  
  // Reconciliation relationships
  paymentSources     PaymentSource[]
  reconciliationLogs ReconciliationLog[]
}

model SecurityEvent {
  id               String   @id @default(cuid())
  eventType        String   // 'failed_login', 'successful_login_after_failures', 'new_ip_login', 'suspicious_pattern'
  userId           Int?     // nullable for failed attempts on non-existent users
  username         String   // for audit trail even if user doesn't exist
  ipAddress        String
  userAgent        String?
  timestamp        DateTime @default(now())
  context          Json?    // additional event-specific data
  severity         String   // 'low', 'medium', 'high', 'critical'
  notificationSent Boolean  @default(false)
  
  user User? @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([timestamp])
  @@index([ipAddress])
  @@index([eventType])
}

model PaymentSource {
  id               String   @id @default(cuid())
  hashedIdentifier String   @unique // Hashed bank account number or payment identifier
  sourceType       String   // e.g., 'bank_account', 'stripe_source'
  contactId        String   // Foreign key to Contact
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  contact Contact @relation(fields: [contactId], references: [id])
  
  @@index([contactId])
}

model PendingPayment {
  id                      String   @id @default(cuid())
  transactionFingerprint  String   @unique // Unique identifier for duplicate detection
  paymentDate            DateTime
  amount                 Decimal  @db.Money // Precise decimal for financial data
  source                 String   // 'BANK_CSV' | 'STRIPE_REPORT'
  transactionRef         String   // Original transaction reference
  description            String?  // Transaction description
  hashedAccountIdentifier String? // Hashed account identifier (for bank transactions)
  status                 String   @default("pending") // 'pending', 'processing', 'matched', 'confirmed'
  uploadedAt             DateTime @default(now())
  uploadedByUserId       Int      // Foreign key to User who uploaded
  metadata               Json?    // Additional transaction context
  
  uploadedBy User @relation(fields: [uploadedByUserId], references: [id])
  
  @@index([uploadedByUserId])
  @@index([status])
  @@index([paymentDate, amount]) // Composite index for matching queries
  @@index([uploadedAt])
}

model ReconciliationLog {
  id                    String   @id @default(cuid())
  transactionFingerprint String  @unique // Unique identifier for duplicate detection
  paymentDate           DateTime
  amount                Decimal  @db.Money // Precise decimal for financial data
  source                String   // e.g., 'lloyds_bank', 'stripe'
  transactionRef        String   // Original transaction reference
  reconciledAt          DateTime @default(now())
  reconciledByUserId    Int      // Foreign key to User
  contactId             String   // Foreign key to Contact
  metadata              Json?    // Additional transaction context

  reconciledBy User    @relation(fields: [reconciledByUserId], references: [id])
  contact      Contact @relation(fields: [contactId], references: [id])

  @@index([reconciledByUserId])
  @@index([contactId])
  @@index([reconciledAt])
  @@index([paymentDate, amount]) // Composite index for matching queries
}

model SyncOperation {
  id                String   @id @default(cuid())
  type              String   // 'incremental' or 'full'
  status            String   // 'running', 'success', 'failed'
  startedAt         DateTime @default(now())
  completedAt       DateTime?
  duration          Int?     // Duration in milliseconds
  contactsProcessed Int      @default(0)
  contactsCreated   Int      @default(0)
  contactsUpdated   Int      @default(0)
  contactsSkipped   Int      @default(0)
  errors            Int      @default(0)
  errorDetails      Json?    // Array of error messages
  metadata          Json?    // Additional operation context

  @@index([startedAt])
  @@index([type, status])
  @@index([completedAt])
}